// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RiskManagement.API.RiskManagement.DataProvide;

#nullable disable

namespace RiskManagement.API.Migrations
{
    [DbContext(typeof(RiskManagementDbContext))]
    [Migration("20240804171119_addRiskTablesCompleted")]
    partial class addRiskTablesCompleted
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("RiskManagement.API.RiskManagement.DataProvide.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("RiskManagement.API.RiskManagement.DataProvide.MainRiskCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MainRiskCategory");
                });

            modelBuilder.Entity("RiskManagement.API.RiskManagement.DataProvide.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AssigneeUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Methodology")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("RiskManagement.API.RiskManagement.DataProvide.Risk", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BestSolutionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FinishedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SecondaryRiskCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("SecondaryRiskCategoryId");

                    b.ToTable("Risks");
                });

            modelBuilder.Entity("RiskManagement.API.RiskManagement.DataProvide.RiskDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EstimatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("EstimatedOpportunityAmount")
                        .HasColumnType("bigint");

                    b.Property<long?>("EstimatedRiskAmount")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsOpportunity")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("OpportunityImpact")
                        .HasColumnType("int");

                    b.Property<int?>("OpportunityProbability")
                        .HasColumnType("int");

                    b.Property<int?>("OpportunityScore")
                        .HasColumnType("int");

                    b.Property<long>("RiskId")
                        .HasColumnType("bigint");

                    b.Property<int?>("RiskImpact")
                        .HasColumnType("int");

                    b.Property<int?>("RiskProbability")
                        .HasColumnType("int");

                    b.Property<int?>("RiskScore")
                        .HasColumnType("int");

                    b.Property<string>("RupPhase")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("RiskId");

                    b.ToTable("RiskDetails");
                });

            modelBuilder.Entity("RiskManagement.API.RiskManagement.DataProvide.SecondaryRiskCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MainRiskCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MainRiskCategoryId");

                    b.ToTable("SecondaryRiskCategory");
                });

            modelBuilder.Entity("RiskManagement.API.RiskManagement.DataProvide.Solution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("RiskId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RiskId");

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("RiskManagement.API.RiskManagement.DataProvide.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RiskManagement.API.RiskManagement.DataProvide.Project", b =>
                {
                    b.HasOne("RiskManagement.API.RiskManagement.DataProvide.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RiskManagement.API.RiskManagement.DataProvide.Risk", b =>
                {
                    b.HasOne("RiskManagement.API.RiskManagement.DataProvide.SecondaryRiskCategory", "SecondaryRiskCategory")
                        .WithMany("Risks")
                        .HasForeignKey("SecondaryRiskCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecondaryRiskCategory");
                });

            modelBuilder.Entity("RiskManagement.API.RiskManagement.DataProvide.RiskDetails", b =>
                {
                    b.HasOne("RiskManagement.API.RiskManagement.DataProvide.Risk", "Risk")
                        .WithMany("RiskDetails")
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Risk");
                });

            modelBuilder.Entity("RiskManagement.API.RiskManagement.DataProvide.SecondaryRiskCategory", b =>
                {
                    b.HasOne("RiskManagement.API.RiskManagement.DataProvide.MainRiskCategory", "MainRiskCategory")
                        .WithMany("SecondaryRiskCategories")
                        .HasForeignKey("MainRiskCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainRiskCategory");
                });

            modelBuilder.Entity("RiskManagement.API.RiskManagement.DataProvide.Solution", b =>
                {
                    b.HasOne("RiskManagement.API.RiskManagement.DataProvide.Risk", "Risk")
                        .WithMany("Solutions")
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Risk");
                });

            modelBuilder.Entity("RiskManagement.API.RiskManagement.DataProvide.User", b =>
                {
                    b.HasOne("RiskManagement.API.RiskManagement.DataProvide.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RiskManagement.API.RiskManagement.DataProvide.Company", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("RiskManagement.API.RiskManagement.DataProvide.MainRiskCategory", b =>
                {
                    b.Navigation("SecondaryRiskCategories");
                });

            modelBuilder.Entity("RiskManagement.API.RiskManagement.DataProvide.Risk", b =>
                {
                    b.Navigation("RiskDetails");

                    b.Navigation("Solutions");
                });

            modelBuilder.Entity("RiskManagement.API.RiskManagement.DataProvide.SecondaryRiskCategory", b =>
                {
                    b.Navigation("Risks");
                });
#pragma warning restore 612, 618
        }
    }
}
